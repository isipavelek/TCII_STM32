/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include<stdio.h>
#include <stdbool.h>
#include "arm_math.h"
#include "adc.h"
#include "hw_init.h"

#define SAMPLE_RATE 44100

#define FIR_TAP_NUM 101
#define IIR_TAP_NUM 5

bool flag = false;


typedef enum{
	TALKTHROUGH,
	FIR,
	IIR,
}filter_type_t;

filter_type_t filter = TALKTHROUGH; //Funci√≥n que ejecuta


extern procesar_type_t procesar;

//Estructuras
arm_fir_instance_f32 float_SFIR;
arm_biquad_casd_df1_inst_f32 float_SIIR;


arm_fir_instance_q31 SFIR;
arm_biquad_casd_df1_inst_q31 SIIR;

//Variables de estado
float float_fir_state[FIR_TAP_NUM+SAMPLES_PER_BLOCK-1];
float float_iir_state[IIR_TAP_NUM+SAMPLES_PER_BLOCK-1];
q31_t fir_state[FIR_TAP_NUM+SAMPLES_PER_BLOCK-1];
q31_t iir_state[IIR_TAP_NUM+SAMPLES_PER_BLOCK-1];

//Ping Pong Buffers
extern q31_t InputA[SAMPLES_PER_BLOCK];
extern q31_t InputB[SAMPLES_PER_BLOCK];
extern q31_t OutputA[SAMPLES_PER_BLOCK];
extern q31_t OutputB[SAMPLES_PER_BLOCK];

extern float float_InputA[SAMPLES_PER_BLOCK];
extern float float_InputB[SAMPLES_PER_BLOCK];
extern float float_OutputA[SAMPLES_PER_BLOCK];
extern float float_OutputB[SAMPLES_PER_BLOCK];


int32_t fir_taps[FIR_TAP_NUM] = {0};
float float_fir_taps[FIR_TAP_NUM] = {0};
int32_t iir_taps[IIR_TAP_NUM] = {0};
float float_iir_taps[IIR_TAP_NUM] = {0};

extern ADC_HandleTypeDef hadc1;
extern DAC_HandleTypeDef hdac;
extern TIM_HandleTypeDef htim2;

int main(void)
{

  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_ETH_Init();
  MX_USART3_UART_Init();
  MX_USB_OTG_FS_PCD_Init();
  MX_ADC1_Init();
  MX_DAC_Init();
  MX_TIM2_Init();

  MX_NVIC_Init();
  HAL_ADC_Start_IT(&hadc1);
  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
  HAL_TIM_Base_Start(&htim2);

  //Conversion float to q31
//	arm_float_to_q31(float_fir_taps, fir_taps,FIR_TAP_NUM);
//	arm_float_to_q31(float_iir_taps, iir_taps, IIR_TAP_NUM);

	//Inicializa los filtros
	//arm_fir_init_q31(&SFIR,FIR_TAP_NUM,fir_taps,fir_state,SAMPLES_PER_BLOCK);
	//arm_biquad_cascade_df1_init_q31(&SIIR,1,iir_taps,iir_state,0);
  arm_fir_init_f32(&float_SFIR,FIR_TAP_NUM,float_fir_taps,float_fir_state,SAMPLES_PER_BLOCK);
  arm_biquad_cascade_df1_init_f32(&float_SIIR,1,float_iir_taps,float_iir_state);


  while (1){
	  if(procesar){
			switch (filter){
				case TALKTHROUGH:
						for(uint16_t i=0;i<SAMPLES_PER_BLOCK;i++){
							if(procesar==PROCESAR_A)OutputA[i]=InputA[i];
							else OutputB[i]=InputB[i];
						}
						break;

				case IIR:
						if(procesar==PROCESAR_A){
							//arm_biquad_cascade_df1_q31  (&SIIR, InputA, OutputA, SAMPLES_PER_BLOCK);
							arm_biquad_cascade_df1_f32  (&float_SIIR, float_InputA, float_OutputA, SAMPLES_PER_BLOCK);
						}else {
							arm_biquad_cascade_df1_f32  (&float_SIIR, float_InputB, float_OutputB, SAMPLES_PER_BLOCK);
							//arm_biquad_cascade_df1_q31  (&SIIR, InputB, OutputB, SAMPLES_PER_BLOCK);
						}
						break;

				case FIR:
						if(procesar==PROCESAR_A){
							//arm_fir_q31(&SFIR,InputA, OutputA, SAMPLES_PER_BLOCK);
							arm_fir_f32(&float_SFIR,float_InputA, float_OutputA, SAMPLES_PER_BLOCK);
						}else {
							arm_fir_f32(&float_SFIR,float_InputB, float_OutputB, SAMPLES_PER_BLOCK);
						}
						break;
			}
			procesar=NO_PROCESAR;
		}

  }

}

